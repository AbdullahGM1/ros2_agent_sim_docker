#
# Custom ROS2 Humble + Gazebo Garden + XRCE-DDS + PX4 + MAVROS + ROSA + ChatOllama + Qwen3:8b
#

FROM nvidia/cuda:12.2.0-devel-ubuntu22.04
#
LABEL maintainer="AbdullahGM1 <agm.musalami@gmail.com>"

#
# Install ROS ros humble-dekptop-full
#
ENV DEBIAN_FRONTEND noninteractive
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

RUN apt update && apt install -y curl software-properties-common && add-apt-repository universe \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt update &&  apt upgrade -y
RUN apt install -y ros-humble-desktop ros-dev-tools \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

#
# Setup XRCE-DDS Agent & Client
#
RUN git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git && \
    cd Micro-XRCE-DDS-Agent && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make && \
    make install && \
    ldconfig /usr/local/lib/

RUN apt-get update && apt-get -y --quiet --no-install-recommends install \
		bzip2 \
		ca-certificates \
		ccache \
		cmake \
		cppcheck \
		dirmngr \
		doxygen \
		file \
		g++ \
		gcc \
		gdb \
		git \
		gnupg \
		gosu \
		lcov \
		libfreetype6-dev \
		libgtest-dev \
		libpng-dev \
		libssl-dev \
		lsb-release \
		make \
		openssh-client \
		pkg-config \
		python3-dev \
		python3-pip \
		rsync \
		shellcheck \
		tzdata \
		unzip \
		valgrind \
		wget \
		xsltproc \
		zip \
        gedit \
		bash-completion \
		command-not-found \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

COPY scripts/px4_dev.sh /tmp/px4_dev.sh
COPY scripts/requirements.txt /tmp/requirements.txt

#
# Install PX4 dev requirements
#
RUN /tmp/px4_dev.sh

# create user with id 1001 (jenkins docker workflow default)
RUN useradd --shell /bin/bash -u 1000 -c "" -m user && usermod -a -G dialout user && echo "user:user" | chpasswd && adduser user sudo
# Allow user to run sudo without password
RUN echo "user ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/user && \
    chmod 0440 /etc/sudoers.d/user

# Some QT-Apps/Gazebo don't not show controls without this
ENV QT_X11_NO_MITSHM 1

# Use UTF8 encoding in java tools (needed to compile jMAVSim)
ENV JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8

# Install JSBSim
RUN wget https://github.com/JSBSim-Team/jsbsim/releases/download/v1.1.13/JSBSim-devel_1.1.13-986.jammy.amd64.deb
RUN dpkg -i JSBSim-devel_1.1.13-986.jammy.amd64.deb

#
# Install VS Code for easy code development
#
RUN wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg && \
	install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg && \
	sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list' && \
	rm -f packages.microsoft.gpg
RUN apt install -y apt-transport-https && \
	apt update && \
	apt install -y code \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

RUN echo "source /opt/ros/humble/setup.bash" >> /home/user/.bashrc

#
# Remove binary pkg ros-humble-ros-gz-bridge. Not compatible with ros 2 humble. Need to build form source
#
RUN apt remove -y ros-humble-ros-gz-bridge

# Add Gazebo Garden repository
RUN apt-get update && apt-get install -y lsb-release wget gnupg
RUN wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null

# Install Gazebo Garden
RUN apt-get update && apt-get install -y \
    gz-garden \
    && apt-get -y autoremove \
    && apt-get clean autoclean \
    && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

#
# Build ros-humble-ros-gz-bridge from source
#
ENV ROS_DISTRO humble
RUN apt-get install gz-sim7-cli libgz-transport12-dev libgz-math7-dev libgz-cmake3-dev libignition-cmake2-dev -y \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

# RUN rosdep init
RUN mkdir -p /home/user/ros2_ws/src/
RUN cd /home/user/ros2_ws/src/ && git clone -b humble https://github.com/gazebosim/ros_gz.git

# USER user
ENV GZ_VERSION=garden
RUN rosdep init &&  rosdep update \
	&& bash -c "source /opt/ros/humble/setup.bash" \
	&& cd /home/user/ros2_ws/ \
	&& rosdep install -r --from-paths src -i -y --ignore-src --rosdistro humble
WORKDIR /home/user/ros_ws
RUN bash -c "source /opt/ros/humble/setup.bash && cd /home/user/ros2_ws && export MAKEFLAGS='-j 4' &&  colcon build"
	
# USER root
RUN echo "source /home/user/ros2_ws/install/setup.bash" >> /home/user/.bashrc
	
#
# Install rqt_tf
#
RUN apt update &&  apt install -y ros-humble-rqt-tf-* \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*
	
#
# MAVROS dependencies
#
RUN apt update && \
    apt install -y \
        python3-vcstool \
        python3-rosinstall-generator \
        python3-osrf-pycommon \
        geographiclib-tools \
        libgeographic-dev \
		libasio-dev \
		libgoogle-glog-dev \
		ros-humble-eigen-stl-containers \
		ros-humble-diagnostic-updater \
		ros-humble-geographic-msgs \
		&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/*

RUN geographiclib-get-geoids egm96-5 && \
    geographiclib-get-gravity egm96 && \
    geographiclib-get-magnetic emm2015
RUN pip3 install future

#
# Install ROSA (ROS Agent) - NASA JPL Task Planning Framework
#
RUN pip3 install jpl-rosa

#
# Install Ollama for local LLM support
#
RUN curl -fsSL https://ollama.com/install.sh | sh

#
# Install ChatOllama (LangChain integration)
#
RUN pip3 install langchain langchain-community ollama

# #
# # Pull Qwen3:8b model using Ollama (only if it doesn't already exist)
# #
# RUN bash -c "ollama serve & \
#     sleep 10 && \
#     (ollama list | grep -q 'qwen3:8b' && echo 'Model qwen3:8b already exists, skipping download') || \
#     (echo 'Model qwen3:8b not found, pulling now...' && \
#     ollama pull qwen3:8b || echo 'Failed to pull model during build, will try in container runtime') && \
#     pkill ollama || true"

# Create necessary directories in the image
RUN mkdir -p /home/user/backup

# Copy installation scripts and PX4 configs into backup location
COPY scripts/install.sh /home/user/backup/
COPY PX4_config /home/user/backup/PX4_config/
RUN chmod +x /home/user/backup/install.sh
RUN echo "Files copied successfully to /home/user/backup/"

# Set proper permissions
RUN chown -R user:user /home/user/backup && \
    echo "Permissions set successfully for user:user"

# Create and start as LOCAL_USER_ID
COPY scripts/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Copy middleware profiles
RUN mkdir -p /usr/local/share/middleware_profiles
COPY middleware_profiles/*profile.xml /usr/local/share/middleware_profiles/
ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp

WORKDIR /home/user

CMD ["/bin/bash"]